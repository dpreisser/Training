Excercise Test Case Building Module A

  
  A) Environment:
     MANAGER_W

     UUT:
     manager.c:

     Coverage:
     None first, Statement later

     UUTs & Stubs->Stub dependencies:
     All

     Comments:

     The only original test case which will be created with this excercise is MyTest.
     It will still be used but only with emphasis on float input and tolerance settings
     of expected results (parameter level, test case level and global level)

     All other test cases address all sorts of aspects that will be taught in the modules
     Test Case Building Moule A,B,C. 

     1) Test Cases Add_Included_Dessert:

     	a) Serial:

	   Add_Included_Dessert:
	   Order[0].Entree = CHICKEN

	   Add_Included_Dessert:
	   Order[0].Entree == CHICKEN
	   return == 0

	b) Range&List:

	   Add_Included_Dessert:
	   Order[0].Entree = NO_ENTREE..PASTA/1

	   Add_Included_Dessert:
	   Order[0].Entree == NO_ENTREE,STEAK,CHICKEN,LOBSTER,PASTA
	   return == (5)0

	c) Combination:

	   Add_Included_Dessert:
	   Order[0].Salad = NO_SALAD..GREEN/1
	   Order[0].Entree = NO_ENTREE..PASTA/1

	   Add_Included_Dessert:
	   Order[0].Salad == NO_SALAD..GREEN
	   Order[0].Entree == NO_ENTREE..PASTA
	   return == (15)0

	   Options: Combination Testing

	   !!! Attention:
	   Attention with a range in expected values:
	   It is really addressing a range which means
	   any actual value within this range is a match
	   and not just an abbreviated way of writing a list.
	  
	   Demonstrate by switching to:
	   Order[0].Salad == NO_SALAD,CAESAR,GREEN

	d) Coverage:

	   Add_Included_Dessert:
	   Order[0].Salad = NO_SALAD,CAESAR,GREEN
	   Order[0].Entree = NO_ENTREE,STEAK,LOBSTER
	   Order[0].Beverage = NO_BEVERAGE,MIXED_DRINK,WINE

	   Add_Included_Dessert:
	   Order[0].Dessert = NO_DESSERT,PIE,CAKE
	   return == 0,1,2

     
     2) Test Cases Add_Party_To_Waiting_List:

     	See TestCaseBuildingModuleC.


     3) Test Cases Place_Order:

     	a) MyTest:

	   Stubbed:

      	   Update_Table_Record:
      	   Table == 1, check_total == 10.0
	   Order[0].Entree == Chicken

      	   Place_Order:
      	   Table = 1, Seat = 0
	   Order.Entree = Chicken

      	   Show out of range with Order.entree = 5.

      	   Purpose: First Unit Test for Place_Order.

     	b) Tolerance:

	   Stubbed:

      	   Update_Table_Record:
      	   Table == 1, check_total == 9.0+/-1.5
	   Order[0].Entree == Chicken

      	   Place_Order:
      	   Table = 1, Seat = 0
	   Order.Entree = Chicken

      	   Purpose: Show tolerance notation.

     	c) Cov_Place_Order:

     	   Stubbed:

      	   Update_Table_Record:
      	   Table == 1, ckeck_total == 0.0,14.0,10.0,18.0,12.0,0.0

      	   Place_Order:
      	   Table = 1, Seat = 0
	   Order.Entree = NO_ENTREE..5/1

      	   Purpose: Code coverage of Place_Order.

     	d) Cov_Place_Dessert:

     	   Stubbed:

      	   Update_Table_Record:
      	   Table == 1, ckeck_total == 0.0,14.0,10.0,18.0,12.0,0.0

      	   Place_Order:
	   Table = 1, Seat = 0
      	   Order.Salad = (3)Caesar,(3)Green
	   Order.Entree = NO_ENTREE..5/1
      	   Order.Beverage = (3)Mixed_Drink,(3)Wine.

      	   Purpose: Coverage of Add_Included_Dessert and of Place_Order.

     	e) FoolTheBill:

      	   Enable SBF for Add_Included_Dessert.

	   Stubbed:

      	   Add_Included_Dessert:
      	   Order[0].Entree = Lobster

      	   Update_Table_Record:
      	   Table == 1, check_total == 10.0
	   Order[0].Entree == Lobster

      	   Place_Order:
      	   Table = 1, Seat = 0
	   Order.Entree = Chicken

	   Purpose: Get the lobster for the price of a chicken.
	   Problem with data consistency in code.

    	f) FoolTheBill_ReturnDataListOptions:

      	   Enable SBF for Add_Included_Dessert.

	   Stubbed:

      	   Add_Included_Dessert:
      	   Order[0].Entree = NO_ENTREE..PASTA/1

      	   Update_Table_Record:
      	   Table == 1, check_total == 10.0
	   Order[0].Entree == NO_ENTREE,STEAK,CHICKEN,LOBSTER,PASTA

      	   Place_Order:
      	   Table = 1, Seat = 0
	   Order.Entree = (5)CHICKEN

	   Options->Return Data List Options:
	   Multi-return spans range iterations

	   Purpose: Get any meal for the price of a chicken.


  B) Environment:
     MANA_NONE

     UUT:
     manager.c:

     Coverage:
     None

     UUTs & Stubs->Stub dependencies:
     None

     1) Test Cases Place_Order:

     	a) MyTest:

	   database:
	   <<GLOBAL>>:

      	   Table_Data[1]:
	   Check_Total == 10.0
	   Order[0].Entree == Chicken

      	   Place_Order:
      	   Table = 1, Seat = 0
	   Order.Entree = Chicken

      	   Show that there is no stubbed Update_Table_Record.
	   Instead we access global Table_Data.


  C) Environment:
     MANA_STUB_PROTO

     UUT:
     manager.c:

     Coverage:
     None

     UUTs & Stubs->Stub dependencies:
     Custom, database (stub by prototype)

     Equivalent to environment MANAGER_W.


  D) Environment:
     MANA_STUB_IMPL

     UUT:
     manager.c:

     Coverage:
     None

     UUTs & Stubs->Stub dependencies:
     Custom, database (stub by implementation)

     Equivalent to environment MANAGER_W or MANA_STUB_PROTO
     except that names of parameters are taken from implementation:
     check_total (proto) -> check_ttl (impl).


  E) Environment:
     MANA_STUB_NONE

     UUT:
     manager.c:

     Coverage:
     None

     UUTs & Stubs->Stub dependencies:
     Custom, database (not stubbed)

     Equivalent to environment MANA_NONE.
