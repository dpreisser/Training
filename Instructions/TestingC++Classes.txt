Excercise Testing C++ Classes

  A) Environment:
     SHAPE_W

     UUT:
     combo.cpp
     shape.cpp

     Coverage:
     Statement

     UUTs & Stubs->Stub dependencies:
     All


     1) Initialization Tests:

     	a) Normal:
	   
	   combo:
      	   <<GLOBAL>>:
      	   Rectangle Instance: Rectangle
      	   Rectangle::Rectangle( ... )
      	   x = 2, y = 3, height = 4, width = 5

     	a) Default:
	   
	   combo:
      	   <<GLOBAL>>:
      	   Rectangle Instance: Rectangle
      	   Rectangle::Rectangle()
      	   mX = 2, mY = 3, mHeight = 4, mWidth = 5


     2) Compound Tests:

     	a) <COMPOUND>>.001:
	   Build_Rectangle
	   getArea_C
	   getY_C


     3) Test Cases Rectangle::Rectangle( ... ):

      	a) Build_Rectangle:

	   Rectangle::Rectangle( ... )
      	   x = 2, y = 3, height = 4, width = 5

      	b) Rectangle:

	   Rectangle::Rectangle( ... )
      	   x = 2, y = 3, height = 4, width = 5

	   combo:
	   <<GLOBAL>>:
	   Rectangle Instance: Rectangle
      	   mX == 2, mY == 3, mHeight == 4, mWidth == 5

	   
     4) Test Cases Rectangle::getArea:

     	a) SEGFLT:

      	   Rectangle::getArea:
      	   return == 20.0

   	b) Normal:

	   combo:
      	   <<GLOBAL>>:
      	   Rectangle Instance: Rectangle
      	   Rectangle::Rectangle( ... )
      	   x = 2, y = 3, height = 4, width = 5

	   Rectangle::getArea:
      	   return == 20.0

   	c) Default:

	   combo:
      	   <<GLOBAL>>:
      	   Rectangle Instance: Rectangle
      	   Rectangle::Rectangle()
      	   mX = 2, mY = 3, mHeight = 4, mWidth = 5

      	   Rectangle::getArea:
      	   return == 20.0

	d) getArea_I:

	   Rectangle::getArea:
      	   return == 20.0

      	e) getArea_C:

	   Rectangle::getArea:
      	   return == 20.0


     5) Test Cases Rectangle::getX:

      	a) getX_I:

	   Rectangle::getX:
      	   return == 2


     6) Test Cases Rectangle::getY:

        a) getY_C:

	   Rectangle::getY:
      	   return == 3


  B) Environment:
     SHAPE_2_W

     UUT:
     combo.cpp

     Coverage:
     Statement

     UUTs & Stubs->Stub dependencies:
     All

     Notice that Shape is not a UUT and thus
     all functions defined in shape.cpp are stubbed.
     Especially the constructors which are used to
     construct instances of Rectangle or Square.


     1) Test Cases Rectangle::getArea:

   	a) Normal:

	   combo:
      	   <<GLOBAL>>:
      	   Rectangle Instance: Rectangle
      	   Rectangle::Rectangle( ... )
      	   x = 2, y = 3, height = 4, width = 5

	   combo:
      	   <<GLOBAL>>:
      	   Rectangle Instance: Rectangle
      	   mX == 2, mY == 3, mHeight == 4, mWidth == 5

	   Rectangle::getArea:
      	   return == 20.0

	   Environment->Configure Stubs->Edit:
	   Stubbed Subprograms: Shape.h: Shape::Shape( ... ):
	   this->mX = 2;
	   this->mY = 3;
